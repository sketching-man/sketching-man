https://victorydntmd.tistory.com/344

Zookeeper ( Apache Zookeeper )
본래 Zookeeper의 용도는 클러스터 최신 설정정보 관리, 동기화, 리더 채택 등 클러스터의 서버들이 공유하는 데이터를 관리하기 위해 사용됩니다.
복잡하니까 그냥 Broker에 분산 처리된 메시지 큐의 정보들을 관리한다고만 이해합시다...
클러스터를 관리하는 Zookeeper 없이는 Kafka 구동이 불가능합니다.
즉, Kafka 서버를 가동하려면 Zookeeper를 먼저 가동해줘야 합니다.( 그래서 Kafka 다운로드시 Zookeeper도 함께 제공해줍니다.)

kafka란?
Kafka는 Pub-Sub 모델의 메시지 큐입니다. 분산환경에 특화되어있는 특징을 가지고 있습니다.

Event
kafka에서 Producer와 Consumer가 데이터를 주고 받는 단위입니다.

Producer
kafka에 이벤트를 게시(post)하는 클라이언트 어플리케이션을 의미합니다.

Broker
Kafka Server를 의미합니다. 한 클러스터 내에서 Kafka server를 여러 대 띄울수 있습니다.

Consumer
Topic을 구독하고 이로부터 얻어낸 이벤트를 처리하는 클라이언트 어플리케이션 입니다.

Topic
이벤트가 쓰이는 곳입니다.
Producer는 이 Topic에 이벤트를 게시합니다.
그리고 Consumer는 Topic으로 부터 이벤트를 가져와 처리합니다.
Topic은 파일시스템의 폴더와 유사하며, 이벤트는 파일과 유사합니다.

Partition
Topic는 여러 Broker에 분산되어 저장되며, 이렇게 분산된 Topic을 Partition이라 합니다.
어떤 이벤트가 Partition에 저장될지는 이벤트의 key에 의해 정해집니다.
Kafka는 Topic의 Partition에 지정된 Consumer가 항상 정확히 동일한 순서로 Partition의 이벤트를 읽을것을 보장합니다. 단, 하나의 Partition에 대해서만. 큐니까 당연하지

push & pull
kafka의 Consumer는 Pull 모델을 기반으로 메시지 처리를 진행합니다.
즉, Broker가 Consumer에게 메시지를 전달하는 것이 아닌, Consumer가 필요할때, Broker로 부터 메시지를 가져와 처리하는 형태입니다.
- 다양한 소비자의 처리 형태와 속도를 고려하지 않아도 된다.
- 불필요한 지연없이 일괄처리를 통해 성능향상 도모.
- 데이터가 없음에도 정기적인 polling으로 인해 자원을 낭비하는 문제.

기록 시퀀스
Producer는 정해진 Topic으로 메시지를 기록합니다.
- Partition이 여러 개 있을 경우, 기록 될 Partition의 선택은 partitioner에 의해 결정됩니다.
- Partition이 여러 개 있으면 병렬 처리라는 이점이 있지만, Partition 개수는 주의해서 잘 설정해줘야 합니다.
각 Partition 내에서는 가장 마지막 offset 뒤에 신규 메시지가 저장되므로, Partition 내에서는 순서가 보장되며 기록이됩니다.
- 하지만 실제 메시지가 사용되는 순서는 순서가 보장되지 않는데요, 그 이유는 Consumer의 동작 방식을 이해해야 합니다.

읽기 시퀀스
Consumer Group은 하나의 Topic을 담당합니다.
- 즉, Topic은 여러 개의 Consumer Group이 접근할 수 있지만, 하나의 Consumer Group은 하나의 Topic에만 접근할 수 있습니다.
	- 왜 존재하는가?
		1) Partition 접근하는 Consumer 관리
			Consumer Group 내에서 Consumer 인스턴스들은 Topic내에 Partition에서 다음에 소비할 offset이 어디인지 공유하면서 메시지를 소비합니다.
			그렇기 때문에 다음에 소비할 offset을 잘 관리할 수 있습니다.
			Consumer Group이 없을 경우, 하나의 Partition에 여러 Consumer가 동시에 접근한다면 어떤 Consumer가 몇 번의 offset을 소비해야 하는지 알 수 없게 됩니다.
			즉, Consumer Group을 통해 하나의 Partition에는 하나의 Consumer 인스턴스만 접근할 수 있도록 관리합니다. locking과 비슷?
		2) offset을 공유하여 고가용성을 확보
			Partition에는 하나의 Consumer 인스턴스만 접근할 수 있기 때문에,
			특정 Consumer 인스턴스에 에러가 발생했을 시 다른 Consumer 인스턴스는 에러가 발생한 Consumer 인스턴스가 소비하던 Partition을 소비하게 됩니다.
			즉, Consumer가 다운될 때를 대비해 Consumer Group의 Consumer 인스턴스들은 offset을 공유하고 있으며, 이를 통해 고가용성이 확보됩니다.

Offset란?
파티션안에 데이터 위치를 유니크한 숫자로 표시한 것을 offset

컨슈머 그룹?
카프카는 각각의 파티션에 대해서만 순서를 보장합니다. 
그래서, 1개의 파티션인 경우에는 프로듀서가 보낸 순서대로 가져올 수 있지만,
파티션이 8개인 경우에는 프로듀서가 보낸 순서대로 메시지를 가져올 수 없었던 것입니다.
Consumer Group란? 컨슈머 인스턴스들을 대표하는 그룹!
	사용 이유 1. consumer 그룹은 여러 서버로 구성되어 있어 고장난 server만 제외되고, 나머지 서버 3대로 멈추지 않고 계속해서 작업을 이어갈 수 있습니다.
	사용 이유 2. 컨슈머 그룹들은 자신의 그룹에 대한 offset 관리를 하기 때문입니다.
		카프카는 컨슈머들에 대한 구분이 없습니다. 단지 컨슈머가 연결된 상태일뿐, 누가 데이터를 가져가는지 구분이 없는 상태입니다.
		그래서 B 사용자가 가져오기를 할 때, A 사용자가 데이터를 가져오면서 저장했던 offset 정보를 그대로 이용하게 됩니다.
		이를 방지하기 위해, 동일한 작업을 하는 서버끼리는 컨슈머 그룹으로 묶어 그룹끼리 서로 다른 offset을 관리합니다.
1 개의 파티션은 컨슈머 그룹 중 한개의 컨슈머만 연결이 가능하다. 그룹 내 N개의 컨슈머가 하나의 파티션을 공유할 수 없음
1 개의 컨슈머는 여러 파티션을 subscribe할 수 있다.

이상적인 파티션 갯수?
Partition의 개수 >= Consumer 인스턴스의 갯수를 유지하는 것이 좋습니다.
하나의 Partition에 하나의 Consumer가 담당하는 것이 좋지만 딱 맞출수는 없으므로, Consumer 수가 모자라도 상관은 없습니다.
주의할 점은 한 번 Partition을 늘리면 다시 줄일 수 없기 때문에, 처리량을 잘 고려하여 Partition과 Consumer의 개수를 선택해야 할 것입니다.

파티션 vs 컨슈머
Consumer Group 은 Consumer 들이 병렬적으로 메시지를 소비할 수 있도록 한다.
병렬 처리를 가능케 함으로써 처리량은 매우 높아지지만, 그룹의 Maximum Parallelism 은 토픽의 파티션 개수와 동일하다.
예를 들어, N 개의 파티션이 존재하는 토픽에 N + 1 개의 Consumer 가 있는 경우,
	N 개의 Consumer 들은 파티션을 각각 배정받지만 남은 Consumer 는 다른 Consumer 가 장애가 발생하지 않는 한,
	Idle 상태로 파티션에 배정되기를 기다리게 된다. 이는 Hot Failover 를 구현하는 좋은 전략이 될 수 있다.

RabbitMQ vs Kafka
RabbitMQ
Message Broker가 Consumer에게 메시지를 push하는 방식
Broker는 Consumer의 처리여부에 관계없이 push를 하므로, 메시지 소비 속도보다 생산 속도가 빠를 경우 Consumer에 부하를 주게됩니다.
RabbitMQ는 DRAM을 사용하므로 buffer를 사용하지만, DRAM을 다 사용하면 disk에 저장합니다. 따라서 batch 같이 큰 작업에서는 disk로 메시지를 읽어올 경우 지연이 발생합니다.
Kafka
Consumer가 Broker로부터 메시지를 pull하는 방식
Consumer가 처리할 수 있을 때 메시지를 가져오므로 자원을 효율적으로 사용합니다.
Kafka는 애초에 메시지를 disk에 저장하고, 이미 처리한 과거의 offset으로 자유롭게 움직일 수 있으므로 batch 작업에서 자원의 낭비라던지 지연이 발생하지 않습니다.
메시지를 쌓아두었다가 처리하는 batch Consumer 구현도 가능합니다.

고가용성 - Replication
Topic을 생성할 때, --replication-factor 옵션을 부여하면 복제본(replication)을 생성할 수 있습니다.
Replication이란 Zookeeper가 leader가 되는 Partition을 정하고, Partition을 각 broker마다 복제를 하는 것을 말합니다.
이 때 leader를 복제하는 partition을 follower라 합니다.

카프카에 연결할 때 어디로 연결해야 하지?
개별 브로커는 클러스터 전체 데이터를 가지고 있지 않으므로, 클라이언트는 자원에 접근하기 위해 자원의 위치를 알아야 함.
bootstrap.servers 설정은 클라이언트가 접근하는 토픽 파티션의 메타데이터를 요청하기 위한 설정임. 즉, 아무데나 연결해서 브로커의 호스트/포트 정보의 리스트를 받아옴.
하나만 하면 불안하고, 다 할 필요도 없음.

어떤 순서로 데이터 받아오나?
클라이언트는 bootstrap.servers 설정에 입력된 브로커 호스트 정보를 이용하여 메타데이터를 요청합니다. 클라이언트와 브로커 사이의 메타데이터를 주고받는 과정은 다음과 같습니다. 
	1. 클라이언트가 브로커와 연결
	2. 연결 성공 시, 클러스터에 등록된 모든 브로커와 토픽, 파티션의 메타데이터 전송
	3. 클라이언트는 메타데이터에서 토픽 파티션의 위치(브로커)를 찾음
	4. 클라이언트는 해당 브로커로 요청